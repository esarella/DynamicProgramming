/*
Given a string, find if there is any sub-sequence that repeats itself.
A sub-sequence of a string is defined as a sequence of characters generated by deleting some characters in the string without changing the order of the remaining characters.

Input:
string

Output:

0/1
0 -> No
1 -> Yes
Example:

abab ------> yes, ab is repeated. So, return 1.
abba ------> No, a and b follow different order. So, return 0.
NOTE : sub-sequence length should be greater than or equal to 2

 */
package DynamicProgramming;

public class RepeatingSubSequence {

    public static int anytwo(String A) {
        int dp[][];
        int n = A.length();
        dp = new int[n + 1][n + 1];

        for (int i = 1; i < n + 1; i++) {
            for (int j = i + 1; j < n + 1; j++) {
                if (A.charAt(i - 1) == A.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }

        for (int i = 0; i < n + 1; i++) {
            for (int j = 0; j < n + 1; j++) {
                if (dp[i][j] > 1)
                    return 1;
            }
        }

        return 0;
    }

    public static void main(String[] args) {
        String x = "abab";
        String y = "abba";
        System.out.println(anytwo(x));
        System.out.println(anytwo(y));
    }
}
